import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';
import { URL } from 'url';

import type { FontConfig, FontsConfig } from '@/types.js';

interface LicenseData {
  generatedAt: string;
  fonts: {
    [fontId: string]: {
      name: string;
      displayName: string;
      source: string;
      license: {
        type: string;
        url: string;
      };
    };
  };
}

class LicenseGenerator {
  private configPath: string;
  private buildDir: string;

  constructor() {
    this.configPath = path.join(process.cwd(), 'src/config/fonts.json');
    this.buildDir = path.join(process.cwd(), 'build');
  }

  async loadConfig(): Promise<FontsConfig> {
    try {
      const config = await fs.readJson(this.configPath);
      return config as FontsConfig;
    } catch (error) {
      console.error(
        chalk.red('Failed to load font configuration:'),
        (error as Error).message
      );
      throw error;
    }
  }

  async generateLicenseFile(): Promise<void> {
    console.log(chalk.blue('ðŸ“„ Generating font license information...'));

    const config = await this.loadConfig();
    const timestamp = new Date().toISOString();

    let licenseContent = `# Font Licenses and Attribution

Generated on: ${timestamp}
Source: Web Font Auto-Subsetting Workflow

## Included Fonts

`;

    for (const [fontId, fontConfig] of Object.entries(config.fonts)) {
      licenseContent += `### ${fontConfig.displayName}

- **Font ID**: \`${fontId}\`
- **Original Name**: ${fontConfig.name}
- **Source Repository**: [${fontConfig.source.owner}/${
        fontConfig.source.repo
      }](${fontConfig.source.url})
- **License**: ${fontConfig.license.type}
- **License URL**: ${fontConfig.license.url}
- **Description**: ${this.getDescription(fontConfig)}

`;
    }

    licenseContent += `## License Compliance

This project includes subsetted versions of the above fonts. All fonts retain their original licenses and attribution requirements. Please refer to each font's source repository for complete license terms.

## Usage Rights

- **I.Ming CP**: Available under IPA Font License Agreement v1.0
- **LXGW WenKai TC**: Available under SIL Open Font License 1.1
- **Amstelvar**: Available under SIL Open Font License 1.1

## Attribution

When using these fonts, please provide appropriate attribution as required by their respective licenses.

---

*This file is automatically generated as part of the font build process.*
`;

    // Write license file to build directory
    const licensePath = path.join(this.buildDir, 'FONT_LICENSES.md');
    await fs.writeFile(licensePath, licenseContent);

    console.log(chalk.green(`âœ… License file generated: ${licensePath}`));

    // Also generate JSON format for programmatic use
    const licenseData: LicenseData = {
      generatedAt: timestamp,
      fonts: Object.fromEntries(
        Object.entries(config.fonts).map(([fontId, fontConfig]) => [
          fontId,
          {
            name: fontConfig.name,
            displayName: fontConfig.displayName,
            source: fontConfig.source.url,
            license: fontConfig.license,
          },
        ])
      ),
    };

    const licenseJsonPath = path.join(this.buildDir, 'font-licenses.json');
    await fs.writeJson(licenseJsonPath, licenseData, { spaces: 2 });

    console.log(chalk.green(`âœ… License JSON generated: ${licenseJsonPath}`));
  }

  getDescription(fontConfig: FontConfig): string {
    const descriptions: Record<string, string> = {
      imingcp:
        'A high-quality Traditional Chinese serif font based on Mincho style',
      lxgwwenkaitc:
        'A handwriting-style Traditional Chinese font with elegant strokes',
      amstelvar: 'A parametric variable font with multiple design axes',
    };

    return (
      descriptions[fontConfig.name.toLowerCase().replace(/[^a-z]/g, '')] ??
      'A beautiful font for web typography'
    );
  }
}

// Run if called directly
if (import.meta.url === new URL(process.argv[1] ?? '', 'file:').href) {
  const generator = new LicenseGenerator();
  generator.generateLicenseFile().catch(console.error);
}

export default LicenseGenerator;
