#!/usr/bin/env node

import chalk from 'chalk';
import FontSubset from './src/fontSubset.js';
import fs from 'fs-extra';

async function testChunkingLogic() {
  console.log(chalk.bold.blue('üß™ Testing chunking logic fix...\n'));

  const fontSubset = new FontSubset();
  await fontSubset.init();

  // Load config
  const config = await fontSubset.loadConfig();
  const imingcpConfig = config.fonts.imingcp;

  // Create mock characters (simulate a font with many characters)
  const mockCharacters = [];

  // Add Latin characters
  for (let i = 32; i <= 126; i++) {
    mockCharacters.push(String.fromCharCode(i));
  }

  // Add some Chinese characters
  const chineseChars = [
    '‰∏Ä',
    'ÁöÑ',
    'ÊòØ',
    'Âú®',
    '‰∫∫',
    'Êúâ',
    'Êàë',
    '‰ªñ',
    'ÈÄô',
    'ÂÄã',
    'ÂÄë',
    '‰æÜ',
    'Âà∞',
    'ÊôÇ',
    'Â§ß',
    'Âú∞',
    'ÁÇ∫',
    'Â≠ê',
    '‰∏≠',
    '‰Ω†',
    'Ë™™',
    'Áîü',
    'Âúã',
    'Âπ¥',
    'Ëëó',
    'Â∞±',
    'ÈÇ£',
    'Âíå',
    'Ë¶Å',
    'Â•π',
    'Áúã',
    'Â§©',
    'ÊôÇ',
    'ÈÅé',
    'Âá∫',
    'Â∞è',
    'È∫º',
    'Ëµ∑',
    '‰Ω†',
    'ÈÉΩ',
    'Êää',
    'Â•Ω',
    'ÈÇÑ',
    'Â§ö',
    'Ê≤í',
    'ÁÇ∫',
    'Âèà',
    'ÂèØ',
    'ÂÆ∂',
    'Â≠∏',
    'Âè™',
    '‰ª•',
    '‰∏ª',
    'ÊúÉ',
    'Ê®£',
    'Âπ¥',
    'ÊÉ≥',
    'Áîü',
    'Âêå',
    'ËÄÅ',
    '‰∏≠',
    'ÂçÅ',
    'Âæû',
    'Ëá™',
    'Èù¢',
    'Ââç',
    'È†≠',
    'ÈÅì',
    'ÂÆÉ',
    'Âæå',
    'ÁÑ∂',
    'Ëµ∞',
    'Âæà',
    'ÂÉè',
    'Ë¶ã',
    'ÂÖ©',
    'Áî®',
    'Â•π',
    'Âúã',
    'Âãï',
    'ÈÄ≤',
    'Êàê',
    'Âõû',
    '‰ªÄ',
    'ÈÇä',
    '‰Ωú',
    'Â∞ç',
    'Èñã',
    'ËÄå',
    'Â∑±',
    '‰∫õ',
    'Áèæ',
    'Â±±',
    'Ê∞ë',
    'ÂÄô',
    'Á∂ì',
    'Áôº',
    'Â∑•',
    'Âêë',
    '‰∫ã',
    'ÂëΩ',
    'Áµ¶',
    'Èï∑',
    'Ê∞¥',
    'Âπæ',
    'Áæ©',
    '‰∏â',
    'ËÅ≤',
    'Êñº',
    'È´ò',
    'Êâã',
    'Áü•',
    'ÁêÜ',
    'Áúº',
    'Âøó',
    'Èªû',
    'ÂøÉ',
    'Êà∞',
    '‰∫å',
    'Âïè',
    '‰ΩÜ',
    'Ë∫´',
    'Êñπ',
    'ÂØ¶',
    'ÂêÉ',
    'ÂÅö',
    'Âè´',
    'Áï∂',
    '‰Ωè',
    'ËÅΩ',
    'Èù©',
    'Êâì',
    'Âë¢',
    'Áúü',
    'ÂÖ®',
    'Êâç',
    'Âõõ',
    'Â∑≤',
    'ÊâÄ',
    'Êïµ',
    '‰πã',
    'ÊúÄ',
    'ÂÖâ',
    'Áî¢',
    'ÊÉÖ',
    'Ë∑Ø',
    'ÂàÜ',
    'Á∏Ω',
    'Ê¢ù',
    'ÁôΩ',
    'Ë©±',
    'Êù±',
    'Â∏≠',
    'Ê¨°',
    'Ë¶™',
    'Â¶Ç',
    'Ë¢´',
    'Ëä±',
    'Âè£',
    'Êîæ',
    'ÂÖí',
    'Â∏∏',
    'Ê∞£',
    '‰∫î',
    'Á¨¨',
    '‰Ωø',
    'ÂØ´',
    'Ëªç',
    'Âêß',
    'Êñá',
    'ÈÅã',
    'ÂÜç',
    'Êûú',
    'ÊÄé',
    'ÂÆö',
    'Ë®±',
    'Âø´',
    'Êòé',
    'Ë°å',
    'Âõ†',
    'Âà•',
    'È£õ',
    'Â§ñ',
    'Ê®π',
    'Áâ©',
    'Ê¥ª',
    'ÈÉ®',
    'ÈñÄ',
    'ÁÑ°',
    'ÂæÄ',
    'Ëàπ',
    'Êúõ',
    'Êñ∞',
    'Â∏∂',
    'Èöä',
    'ÂÖà',
    'Âäõ',
    'ÂÆå',
    'Âçª',
    'Á´ô',
    '‰ª£',
    'Âì°',
    'Ê©ü',
    'Êõ¥',
    '‰πù',
    'ÊÇ®',
    'ÊØè',
    'È¢®',
    'Á¥ö',
    'Ë∑ü',
    'Á¨ë',
    'Âïä',
    'Â≠©',
    'Ëê¨',
    'Â∞ë',
    'Áõ¥',
    'ÊÑè',
    'Â§ú',
    'ÊØî',
    'Èöé',
    'ÈÄ£',
    'Ëªä',
    'Èáç',
    '‰æø',
    'È¨•',
    'È¶¨',
    'Âì™',
    'Âåñ',
    'Â§™',
    'Êåá',
    'ËÆä',
    'Á§æ',
    '‰ºº',
    'Â£´',
    'ËÄÖ',
    'Âπ≤',
    'Áü≥',
    'Êªø',
    'Êó•',
    'Ê±∫',
    'Áôæ',
    'Âéü',
    'Êãø',
    'Áæ§',
    'Á©∂',
    'ÂêÑ',
    'ÂÖ≠',
    'Êú¨',
    'ÊÄù',
    'Ëß£',
    'Á´ã',
    'Ê≤≥',
    'Êùë',
    'ÂÖ´',
    'Èõ£',
    'Êó©',
    'Ë´ñ',
    'Âóé',
    'Ê†π',
    'ÂÖ±',
    'ËÆì',
    'Áõ∏',
    'Á†î',
    '‰ªä',
    'ÂÖ∂',
    'Êõ∏',
    'Âùê',
    'Êé•',
    'Êáâ',
    'Èóú',
    '‰ø°',
    'Ë¶∫',
    'Ê≠•',
    'Âèç',
    'Ëôï',
    'Ë®ò',
    'Â∞á',
    'ÂçÉ',
    'Êâæ',
    'Áà≠',
    'È†ò',
    'Êàñ',
    'Â∏´',
    'Áµê',
    'Â°ä',
    'Ë∑ë',
    'Ë™∞',
    'Ëçâ',
    'Ë∂ä',
    'Â≠ó',
    'Âä†',
    'ËÖ≥',
    'Á∑ä',
    'ÊÑõ',
    'Á≠â',
    'Áøí',
    'Èô£',
    'ÊÄï',
    'Êúà',
    'Èùí',
    'Âçä',
    'ÁÅ´',
    'Ê≥ï',
    'È°å',
    'Âª∫',
    'Ë∂ï',
    '‰Ωç',
    'Âî±',
    'Êµ∑',
    '‰∏É',
    'Â•≥',
    '‰ªª',
    '‰ª∂',
    'ÊÑü',
    'Ê∫ñ',
    'Âºµ',
    'Âúò',
    'Â±ã',
    'Èõ¢',
    'Ëâ≤',
    'Ëáâ',
    'Áâá',
    'Áßë',
    'ÂÄí',
    'Áùõ',
    'Âà©',
    '‰∏ñ',
    'Ââõ',
    '‰∏î',
    'Áî±',
    'ÈÄÅ',
    'Âàá',
    'Êòü',
    'Â∞é',
    'Êôö',
    'Ë°®',
    'Â§†',
    'Êï¥',
    'Ë™ç',
    'Èüø',
    'Èõ™',
    'ÊµÅ',
    'Êú™',
    'Â†¥',
    'Ë©≤',
    '‰∏¶',
    'Â∫ï',
    'Ê∑±',
  ];

  mockCharacters.push(...chineseChars);

  console.log(
    chalk.yellow(`üìä Mock characters: ${mockCharacters.length} total`)
  );
  console.log(chalk.gray(`   Latin: 95, Chinese: ${chineseChars.length}`));

  // Mock the estimateChunkSize method to return predictable values
  const originalEstimate = fontSubset.estimateChunkSize;
  fontSubset.estimateChunkSize = async function (fontPath, characters) {
    // Simulate: Chinese chars = 2KB each, Latin = 0.5KB each
    let size = 0;
    for (const char of characters) {
      if (char.charCodeAt(0) > 127) {
        size += 2; // Chinese character
      } else {
        size += 0.5; // Latin character
      }
    }
    return Math.round(size);
  };

  // Test priority list creation
  const prioritized = await fontSubset.createCharacterPriorityList(
    mockCharacters,
    imingcpConfig.subset.strategy,
    imingcpConfig.subset.priorityData
  );

  console.log(chalk.cyan(`\nüìã Prioritized characters: ${prioritized.length}`));

  // Test chunking with mock font path
  const mockFontPath = '/mock/font.ttf';

  // Simulate chunking logic
  console.log(chalk.blue('\nüîÑ Testing chunking logic...'));
  const chunks = [];
  const chunkSizes = imingcpConfig.subset.chunkSizes;
  let currentChunk = [];
  let chunkIndex = 0;
  const maxCharactersPerChunk = Math.ceil(
    prioritized.length /
      Math.min(imingcpConfig.subset.maxChunks, chunkSizes.length)
  );

  console.log(
    chalk.gray(
      `    üìä Total characters: ${prioritized.length}, max per chunk: ${maxCharactersPerChunk}`
    )
  );

  for (const char of prioritized.slice(0, 200)) {
    // Test with first 200 chars
    currentChunk.push(char);

    const currentSize = await fontSubset.estimateChunkSize(
      mockFontPath,
      currentChunk
    );
    const targetSize =
      chunkSizes[chunkIndex] || chunkSizes[chunkSizes.length - 1];

    const shouldFinalizeBySize = currentSize >= targetSize;
    const shouldFinalizeByCount = currentChunk.length >= maxCharactersPerChunk;
    const isLastChunk = chunkIndex >= imingcpConfig.subset.maxChunks - 1;

    const shouldFinalize =
      (shouldFinalizeBySize || shouldFinalizeByCount || isLastChunk) &&
      (currentChunk.length >= 10 || isLastChunk);

    if (shouldFinalize) {
      const unicodeRanges = fontSubset.calculateUnicodeRanges(currentChunk);
      chunks.push({
        index: chunkIndex,
        characters: [...currentChunk],
        unicodeRanges,
        targetSize: targetSize,
      });

      console.log(
        chalk.green(
          `    ‚úÖ Chunk ${chunkIndex}: ${currentChunk.length} characters, ` +
            `estimated ${currentSize}KB, target ${targetSize}KB ` +
            `(${
              shouldFinalizeBySize
                ? 'size'
                : shouldFinalizeByCount
                ? 'count'
                : 'forced'
            })`
        )
      );

      currentChunk = [];
      chunkIndex++;

      if (chunkIndex >= imingcpConfig.subset.maxChunks || chunks.length >= 5) {
        break; // Limit test output
      }
    }
  }

  // Add remaining characters to final chunk if any
  if (currentChunk.length > 0) {
    const currentSize = await fontSubset.estimateChunkSize(
      mockFontPath,
      currentChunk
    );
    const targetSize =
      chunkSizes[chunkIndex] || chunkSizes[chunkSizes.length - 1];
    chunks.push({
      index: chunkIndex,
      characters: currentChunk,
      unicodeRanges: fontSubset.calculateUnicodeRanges(currentChunk),
      targetSize: targetSize,
    });
    console.log(
      chalk.green(
        `    ‚úÖ Final chunk ${chunkIndex}: ${currentChunk.length} characters, estimated ${currentSize}KB`
      )
    );
  }

  console.log(
    chalk.bold.green(`\nüéâ Result: Generated ${chunks.length} chunks!`)
  );

  if (chunks.length > 1) {
    console.log(chalk.green('‚úÖ Chunking logic is working correctly!'));
  } else {
    console.log(
      chalk.red(
        '‚ùå Still only generating one chunk - more investigation needed'
      )
    );
  }
}

testChunkingLogic().catch(console.error);
